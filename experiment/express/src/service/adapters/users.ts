// Auto-generated by Invoker Generator
// Express Router for UsersHandler

import { UsersHandler } from "../handlers/users";
import { Request as InternalRequest, Response as InternalResponse } from "../handlers/_";

// Function to initialize the handler
async function initializeHandler(): Promise<UsersHandler> {
  const capabilities = {}; // Initialize capabilities if needed
  return new UsersHandler(capabilities);
}

// List of supported HTTP methods for this endpoint
const supportedMethods = [
  'get',

  'post'
];

// Function to set up routes on the Express app or router
export async function setupRoutes(app: any) {
  const handler = await initializeHandler();

  app.all('/users', async (req: any, res: any) => {
    try {
      const methodName = req.method.toLowerCase();

      // Check if the method is supported
      if (!supportedMethods.includes(methodName)) {
        res.status(405).json({ error: 'Method Not Allowed' });
        return;
      }

      // Ensure methodName is a valid method of BaseHandler
      if (typeof (handler as any)[methodName] !== 'function') {
        res.status(405).json({ error: 'Method Not Allowed' });
        return;
      }

      // Create an instance of your custom Request class
      const internalReq = new InternalRequest(
        req.method,
        req.headers,
        req.body,
        req.url
      );

      // Access the handler method safely
      const handlerMethod = (handler as any)[methodName].bind(handler);

      // Invoke the handler method
      const handlerResponse: InternalResponse = await handlerMethod(internalReq);

      // Send the response
      res
        .status(handlerResponse.statusCode)
        .set(handlerResponse.headers)
        .send(handlerResponse.body);
    } catch (error) {
      console.error('Error handling request:', error);
      res.status(500).json({ error: 'Internal Server Error' });
    }
  });
}