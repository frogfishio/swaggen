// Base imports
import { SwaggenHandler, SwaggenRequest, SwaggenResponse } from "./swaggen";

// Proxy import
import { UsersUserIdProxy } from "./proxy";

// Stub import
import { UsersUserIdStub } from "./stub";

// Type imports from proxy
import { ReadUsersByUserIdQueryParams, ReadUsersByUserIdResponse } from "./proxy";

// Auto-generated by Handler Generator
// Handler class for UsersUserId

export class UsersUserIdHandler extends SwaggenHandler {

	private proxy: UsersUserIdProxy = new UsersUserIdStub();

  public async readUsersByUserId(req: SwaggenRequest): Promise<SwaggenResponse> {
    // Proxy method signature: readUsersByUserId(userId: string, query: ReadUsersByUserIdQueryParams): Promise<ReadUsersByUserIdResponse>;
    const userId: string = req.getPathParam('userId') as string;
    const query: ReadUsersByUserIdQueryParams = req.getAllQueryParams() as unknown as ReadUsersByUserIdQueryParams;

    const result = await this.proxy.readUsersByUserId(userId, query);
    // TODO: Implement GET logic
    return new SwaggenResponse(200, { "Content-Type": "application/json" }, result);
  }

  protected getBadRequest(): SwaggenResponse {
    return super.badRequest("Bad Request - Invalid user ID format");
  }

  protected getUnauthorized(): SwaggenResponse {
    return super.unauthorized("Unauthorized - Missing or invalid authentication token");
  }

  protected getForbidden(): SwaggenResponse {
    return super.forbidden("Forbidden - You do not have permission to access this resource");
  }

  protected getNotFound(): SwaggenResponse {
    return super.notFound("User not found");
  }

  protected getInternalServerError(): SwaggenResponse {
    return super.internalServerError("Internal Server Error");
  }

}
