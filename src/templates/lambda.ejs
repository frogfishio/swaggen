<% // File Header %>
// Auto-generated by Invoker Generator
// Adapter Class for <%= handlerClassName %>

import { <%= handlerClassName %> } from "../handlers/<%= handlerFileName %>";
import { Request, Response } from "../handlers/_";
import { LambdaCapabilityFactory } from "../capabilities/lambda/capability"; // Import Lambda capability factory

export class <%= className %> {
  private handler: <%= handlerClassName %>;

  constructor() {
    // Initialize capabilities
    this.initializeHandler();
  }

  // Method to initialize handler with Lambda capabilities
  private async initializeHandler() {
    const awsFactory = new LambdaCapabilityFactory();
    const capabilities = await awsFactory.createCapabilities(<%- JSON.stringify(capabilities) %>);

    // Pass the capabilities to the handler
    this.handler = new <%= handlerClassName %>(capabilities);
  }

  <% Object.keys(methods).forEach((method) => { %>
  public async <%= normalizedEndpoint %>_<%= method.toLowerCase() %>(event: any, context: any): Promise<any> {
    try {
      // Create an instance of your custom Request class
      const internalReq = new Request(
        event.httpMethod,
        event.headers,
        event.body ? JSON.parse(event.body) : undefined,
        event.path
      );

      // Invoke the handler method and get the response
      const handlerResponse: Response = await this.handler.<%= method.toLowerCase() %>(internalReq);

      // Return response in Lambda format
      return {
        statusCode: handlerResponse.statusCode,
        headers: handlerResponse.headers,
        body: JSON.stringify(handlerResponse.body),
      };
    } catch (error) {
      console.error(error);
      return {
        statusCode: 500,
        body: JSON.stringify({ error: "Internal Server Error" }),
      };
    }
  }
  <% }) %>
}