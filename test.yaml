openapi: 3.0.1
info:
  title: Complex User API
  description: An API to manage complex user structures
  version: "1.1.0"
servers:
  - url: http://localhost:3000/api
    description: Local development server

paths:
  /users:
    get:
      summary: Get all users
      description: Retrieve a list of all users
      security:
        - bearerAuth: []
      responses:
        '200':
          description: A JSON array of user objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized - Missing or invalid authentication token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - You do not have permission to access this resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      summary: Create a new user
      description: Add a new user to the system
      security:
        - bearerAuth: []
      requestBody:
        description: User object that needs to be added
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad Request - Invalid user data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized - Missing or invalid authentication token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - You do not have permission to access this resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/{userId}:
    get:
      summary: Get a user by ID
      description: Retrieve a single user by their ID
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
            pattern: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$'
      responses:
        '200':
          description: A single user object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad Request - Invalid user ID format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized - Missing or invalid authentication token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - You do not have permission to access this resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    # BaseUser schema for inheritance with validation rules
    BaseUser:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
          description: A UUIDv4 that uniquely identifies the user
        name:
          type: string
          example: "John Doe"
          minLength: 3
          maxLength: 50
          pattern: '^[a-zA-Z0-9 ]*$'  # Name can include letters, numbers, and spaces
          description: The full name of the user
        email:
          type: string
          format: email
          example: "john.doe@example.com"
          description: The email address of the user
      required:
        - id
        - name
        - email

    # Complex User schema that extends BaseUser
    User:
      allOf:
        - $ref: '#/components/schemas/BaseUser'
        - type: object
          properties:
            profile:
              $ref: '#/components/schemas/Profile'
            addresses:
              type: array
              items:
                $ref: '#/components/schemas/Address'
            role:
              type: string
              enum: [admin, user, guest]
              example: "user"
      required:
        - profile
        - role

    # Nested Profile schema with validation
    Profile:
      type: object
      properties:
        bio:
          type: string
          example: "Software Developer with 5 years of experience."
          maxLength: 200
        website:
          type: string
          format: uri
          example: "https://johndoe.com"
        social:
          type: object
          properties:
            twitter:
              type: string
              format: uri
              example: "https://twitter.com/johndoe"
            linkedin:
              type: string
              format: uri
              example: "https://linkedin.com/in/johndoe"

    # Array of complex Address objects with validation
    Address:
      type: object
      properties:
        street:
          type: string
          example: "123 Main St"
          maxLength: 100
        city:
          type: string
          example: "San Francisco"
          maxLength: 50
        state:
          type: string
          example: "CA"
          maxLength: 20
        zipCode:
          type: string
          example: "94105"
          pattern: '^[0-9]{5}(?:-[0-9]{4})?$'  # US Zip Code format
        country:
          type: string
          example: "USA"
          maxLength: 50
      required:
        - street
        - city
        - state
        - zipCode
        - country

    # Standardized Error schema
    Error:
      type: object
      properties:
        code:
          type: integer
          example: 400
        message:
          type: string
          example: "Invalid request data"
        details:
          type: string
          example: "The email field is required."